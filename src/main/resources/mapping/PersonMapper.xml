<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lh.dao.PersonMapper">
  <resultMap id="BaseResultMap" type="com.lh.pojo.Person">
    <id column="login_id" jdbcType="VARCHAR" property="loginId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="grades" jdbcType="VARCHAR" property="grades" />
    <result column="gender" jdbcType="INTEGER" property="gender" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="major_id" jdbcType="INTEGER" property="majorId" />
    <result column="grade_id" jdbcType="INTEGER" property="gradeId" />
    <result column="person_static" jdbcType="INTEGER" property="personStatic" />
    <result column="qq_number" jdbcType="VARCHAR" property="qqNumber" />
    <result column="enrollment_year" jdbcType="INTEGER" property="enrollmentYear" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="student_status" jdbcType="INTEGER" property="studentStatus" />
    <result column="static_live" jdbcType="INTEGER" property="staticLive" />
    <result column="role_id" jdbcType="INTEGER" property="roleId" />
    <association property="grade" column="grade_id" select="com.lh.dao.GradeMapper.selectByPrimaryKey" javaType="com.lh.pojo.Grade">
    </association>
    <association property="major" column="major_id" select="com.lh.dao.MajorMapper.selectByPrimaryKey" javaType="com.lh.pojo.Major">
    </association>
    <association property="role" column="role_id" select="com.lh.dao.RoleMapper.selectByPrimaryKey" javaType="com.lh.pojo.Role">
    </association>
  </resultMap>

  <resultMap id="TeacherResultMap" type="com.lh.pojo.Teacher">
    <id column="login_id" jdbcType="VARCHAR" property="loginId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="gender" jdbcType="INTEGER" property="gender" />

  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    login_id, name, password, grades, gender, phone, major_id, grade_id, person_static,
    qq_number, enrollment_year, email, student_status, static_live, role_id
  </sql>
  <select id="selectByExample" parameterType="com.lh.pojo.PersonExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from person
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from person
    where login_id = #{loginId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from person
    where login_id = #{loginId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.lh.pojo.PersonExample">
    delete from person
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lh.pojo.Person">
    insert into person (login_id, name, password, 
      grades, gender, phone, 
      major_id, grade_id, person_static,
      qq_number, enrollment_year, email, 
      student_status, static_live, role_id
      )
    values (#{loginId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{grades,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, 
      #{majorId,jdbcType=INTEGER}, #{gradeId,jdbcType=INTEGER}, #{personStatic,jdbcType=INTEGER},
      #{qqNumber,jdbcType=VARCHAR}, #{enrollmentYear,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, 
      #{studentStatus,jdbcType=INTEGER}, #{staticLive,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lh.pojo.Person">
    insert into person
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loginId != null">
        login_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="grades != null">
        grades,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="majorId != null">
        major_id,
      </if>
      <if test="gradeId != null">
        grade_id,
      </if>
      <if test="personStatic != null">
        person_static,
      </if>
      <if test="qqNumber != null">
        qq_number,
      </if>
      <if test="enrollmentYear != null">
        enrollment_year,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="studentStatus != null">
        student_status,
      </if>
      <if test="staticLive != null">
        static_live,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loginId != null">
        #{loginId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="grades != null">
        #{grades,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="majorId != null">
        #{majorId,jdbcType=INTEGER},
      </if>
      <if test="gradeId != null">
        #{gradeId,jdbcType=INTEGER},
      </if>
      <if test="personStatic != null">
        #{personStatic,jdbcType=INTEGER},
      </if>
      <if test="qqNumber != null">
        #{qqNumber,jdbcType=VARCHAR},
      </if>
      <if test="enrollmentYear != null">
        #{enrollmentYear,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="studentStatus != null">
        #{studentStatus,jdbcType=INTEGER},
      </if>
      <if test="staticLive != null">
        #{staticLive,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lh.pojo.PersonExample" resultType="java.lang.Long">
    select count(*) from person
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update person
    <set>
      <if test="record.loginId != null">
        login_id = #{record.loginId,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.grades != null">
        grades = #{record.grades,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.majorId != null">
        major_id = #{record.majorId,jdbcType=INTEGER},
      </if>
      <if test="record.gradeId != null">
        grade_id = #{record.gradeId,jdbcType=INTEGER},
      </if>
      <if test="record.personStatic != null">
        person_static = #{record.personStatic,jdbcType=INTEGER},
      </if>
      <if test="record.qqNumber != null">
        qq_number = #{record.qqNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollmentYear != null">
        enrollment_year = #{record.enrollmentYear,jdbcType=INTEGER},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.studentStatus != null">
        student_status = #{record.studentStatus,jdbcType=INTEGER},
      </if>
      <if test="record.staticLive != null">
        static_live = #{record.staticLive,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null">
        role_id = #{record.roleId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update person
    set login_id = #{record.loginId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      grades = #{record.grades,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      phone = #{record.phone,jdbcType=VARCHAR},
      major_id = #{record.majorId,jdbcType=INTEGER},
      grade_id = #{record.gradeId,jdbcType=INTEGER},
      person_static = #{record.personStatic,jdbcType=INTEGER},
      qq_number = #{record.qqNumber,jdbcType=VARCHAR},
      enrollment_year = #{record.enrollmentYear,jdbcType=INTEGER},
      email = #{record.email,jdbcType=VARCHAR},
      student_status = #{record.studentStatus,jdbcType=INTEGER},
      static_live = #{record.staticLive,jdbcType=INTEGER},
      role_id = #{record.roleId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lh.pojo.Person">
    update person
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="grades != null">
        grades = #{grades,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="majorId != null">
        major_id = #{majorId,jdbcType=INTEGER},
      </if>
      <if test="gradeId != null">
        grade_id = #{gradeId,jdbcType=INTEGER},
      </if>
      <if test="personStatic != null">
        person_static = #{personStatic,jdbcType=INTEGER},
      </if>
      <if test="qqNumber != null">
        qq_number = #{qqNumber,jdbcType=VARCHAR},
      </if>
      <if test="enrollmentYear != null">
        enrollment_year = #{enrollmentYear,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="studentStatus != null">
        student_status = #{studentStatus,jdbcType=INTEGER},
      </if>
      <if test="staticLive != null">
        static_live = #{staticLive,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
    </set>
    where login_id = #{loginId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lh.pojo.Person">
    update person
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      grades = #{grades,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      major_id = #{majorId,jdbcType=INTEGER},
      grade_id = #{gradeId,jdbcType=INTEGER},
      person_static = #{personStatic,jdbcType=INTEGER},
      qq_number = #{qqNumber,jdbcType=VARCHAR},
      enrollment_year = #{enrollmentYear,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      student_status = #{studentStatus,jdbcType=INTEGER},
      static_live = #{staticLive,jdbcType=INTEGER},
      role_id = #{roleId,jdbcType=INTEGER}
    where login_id = #{loginId,jdbcType=VARCHAR}
  </update>

  <!-- 批量插入学生 -->

  <insert id="inputAll" parameterType="java.util.Map">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into person
    (login_id,name,password,grades,gender,major_id,grade_id)
    values
    <foreach collection="personList" item="item" index="index" separator=",">
      (
      #{item.loginId},#{item.name},#{password},#{item.grades},#{item.gender},
      #{majorId},#{gradeId}
      )
    </foreach>
  </insert>

  <!-- 批量插入老师 -->

  <insert id="inputAllT" parameterType="java.util.Map">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into person
    (login_id,name,password,gender,role_id)
    values
    <foreach collection="personList" item="item" index="index" separator=",">
      (
      #{item.loginId},#{item.name},#{password},#{item.gender},
      #{roleId}
      )
    </foreach>
  </insert>

  <select id="list" parameterType="Map" resultMap="BaseResultMap">
    select * from person
    <where>
      <if test="q!=null and q!=''">
        and (grades like #{q}  or enrollment_year like #{q})
      </if>
       and role_id = #{roleId}
    </where>
    <if test="start!=null and size!=null">
      limit #{start},#{size}
    </if>
  </select>

  <select id="listT" parameterType="Map" resultMap="BaseResultMap">
    select * from person
    <where>
      <if test="q!=null and q!=''">
        and (name like #{q}  or phone like #{q})
      </if>
      and role_id != 1 AND role_id != 4
    </where>
    <if test="start!=null and size!=null">
      limit #{start},#{size}
    </if>
  </select>

  <select id="getTotal" parameterType="Map" resultType="Integer">
    select
    count(*) from person
    <where>
      <if test="q!=null and q!=''">
        and (grades like #{q}  or enrollment_year like #{q})
      </if>
      and role_id = #{roleId}
    </where>
  </select>

  <select id="getTotalT" parameterType="Map" resultType="Integer">
    select
    count(*) from person
    <where>
      <if test="q!=null and q!=''">
        and (name like #{q}  or phone like #{q})
      </if>
      and role_id != 1 AND role_id != 4
    </where>
  </select>

  <select id="select"  resultMap="TeacherResultMap">
    select login_id,name,gender from person
    <where>
      and role_id != 1
      and role_id != 4
    </where>
  </select>
</mapper>